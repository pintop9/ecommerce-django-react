pipeline {
    agent any
    // @Library('shared-library') _

    environment {
        GIT_REPO_URL = 'https://github.com/pintop9/ecommerce-django-react.git'
        GIT_BRANCH = 'main'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKERHUB_REPO = 'pintop9'
    }

    stages {
        stage('Pull from GitHub') {
            steps {
                script {
                    try {
                        git branch: GIT_BRANCH, url: GIT_REPO_URL
                    } catch (Exception e) {
                        echo "Failed to pull from GitHub: ${e.message}"
                        error "Stopping the build."
                    }
                }
            }
        }
    
        stage('Test Docker Login') {
            steps {
                script {
                    sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    try {
                        // Check the paths to Dockerfiles and adjust if necessary
                        docker.build("${DOCKERHUB_REPO}/django-web", "-f Dockerfile .")
                        docker.build("${DOCKERHUB_REPO}/django-db", "-f Dockerfile.db .")
                    } catch (Exception e) {
                        echo "Failed to build Docker images: ${e}"
                        throw e
                    }
                }
            }
        }

               stage('Running Tests') {
            steps {
                // Run Python tests with pytest for unit/integration/e2e tests.
                sh """
                cd backend
                python3 -m venv env
                source env/bin/activate
                mkdir -p test-reports
                pytest --html=test-reports/report.html
                """
           }
          post {
            success {
                steps {
                    echo success
                }
            // One or more steps need to be included within each condition's block.
            }
            failure {
              // One or more steps need to be included within each condition's block.
                steps {
                    echo fail
                  // One or more steps need to be included within the steps block.
                }
              }
            }
          


                    // email
                // emailext body: """The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME} find test report in this url: ${BUILD_URL}/My_20Contacts/""",
                // subject: """You got a faild build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from jenkins""", 
                // to: 'gagi.shmagi@gmail.com'
                
                
          //       }
          //     }
          //   }
          // }

}
       // }
        // stage('publish report'){
        //     steps {
        //         publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: '', reportFiles: 'report.html', reportName: 'Django Report', reportTitles: '', useWrapperFileDirectly: true]) 
                
        //     }
        // }

    }
}

                    // email
                // emailext body: """The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME} find test report in this url: ${BUILD_URL}/My_20Contacts/""",
                // subject: """You got a faild build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from jenkins""", 
                // to: 'gagi.shmagi@gmail.com'
                
                
          //       }
          //     }
          //   }
          // }

