pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/pintop9/ecommerce-django-react.git'
        GIT_BRANCH = 'main'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKERHUB_REPO = 'pintop9'
    }

    stages {
        stage('Pull from GitHub') {
            steps {
                script {
                    try {
                        git branch: GIT_BRANCH, url: GIT_REPO_URL
                    } catch (Exception e) {
                        echo "Failed to pull from GitHub: ${e.message}"
                        error "Stopping the build."
                    }
                }
            }
        }

        stage('Test Docker Login') {
            steps {
                script {
                    sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    try {
                        docker.build("${DOCKERHUB_REPO}/django-web", "-f Dockerfile .")
                        docker.build("${DOCKERHUB_REPO}/django-db", "-f Dockerfile.db .")
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        echo "Failed to build Docker images: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        stage('Running Tests') {
            steps {
                script {
                    try {
                        sh '''
                        python3 -m venv env
                        . backend/env/bin/activate
                        mkdir -p backend/test-reports
                        pytest --html=backend/test-reports/report.html
                        '''
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Publish Report') {
            when {
                expression { currentBuild.result == 'FAILURE' }
            }
            steps {
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'backend/test-reports',
                    reportFiles: 'report.html',
                    reportName: 'Django Report',
                    reportTitles: 'The Tests Report'
                ])
            }
        }

        stage('Notify the Developers') {
            steps {
                script {
                    if (currentBuild.result == 'FAILURE') {
                        emailext(
                            body: """
                                <p>The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME}.</p>
                                <p>Find the test report at this URL: ${BUILD_URL}Django_20Report/</p>
                            """,
                            subject: "Failed build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from Jenkins",
                            to: 'bitradingu@gmail.com',
                            mimeType: 'text/html'
                        )
                        slackSend(
                            channel: '#ci-cd',
                            username: 'jenkins',
                            message: "The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME}. Find the test report at this URL: ${BUILD_URL}Django_20Report/"
                        )
                    } else if (currentBuild.result == 'SUCCESS') {
                        echo "Build succeeded. Notify developers."
                        emailext(
                            body: """
                                <p>The build was successful for project ${env.JOB_NAME}.</p>
                            """,
                            subject: "Successful build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from Jenkins",
                            to: 'bitradingu@gmail.com',
                            mimeType: 'text/html'
                        )
                        slackSend(
                            channel: '#ci-cd',
                            username: 'jenkins',
                            message: "The build was successful for project ${env.JOB_NAME}."
                        )
                    }
                }
            }
        }

        stage('Deploy Containers') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    sh '''
                    docker run -d --name django-db -p 5432:5432 ${DOCKERHUB_REPO}/django-db
                    sleep 20
                    docker run -d --name django-web -p 7000:7000 ${DOCKERHUB_REPO}/django-web
                    '''
                }
            }
        }
    }
}
